https://programmers.co.kr/learn/challenges?selected_part_id=17214

1. 문자열 압축
-> aaaaaaaaaa 의 경우 10a가 되며 이 경우 3자리 라는 것을 Case에 추가해야 빨리 풀 수 있었다.

2. 괄호 변환
-> 규칙 파악하는데 시간 걸렸음, 재귀 오랜만에 사용.
-> 재귀 호출이 아주 많을 경우 프로그램이 Daed 발생 가능성이 높아지기에
재귀 보단 loop를 활용하는 쪽으로 하는 것이 좋음
-> 이번 입력은 1000 제한이라 Dead 발생하지 않는 것으로 생각.
-> 176 line에서 .c_str()을 붙여줘야 했었는데 이는, makeDevidedString 여기 vString 만드는 부분에서 공백이 들어감으로 인해 발생하였었음.


3. 자물쇠와 열쇠
-> lock에 다가 0 값의 패딩을 준다
-> key는 회전을 통해 4가지 형태로 존재할 수 있다.
-> 4가지 형태를 패딩을 추가한 lock에 대입하면서 좌물쇠가 풀리는지 확인한다.
-> key와 lock을 배열로 나타내고 서로 일치한다면 합은 1일 것

테스트 3 〉	실패 (1.14ms, 3.97MB)
테스트 7 〉	실패 (3.26ms, 3.99MB)
테스트 10 〉	실패 (5.95ms, 3.98MB)
테스트 11 〉	실패 (4.58ms, 3.99MB)
테스트 14 〉	실패 (0.56ms, 3.98MB)
테스트 15 〉	실패 (0.87ms, 3.97MB)
테스트 20 〉	실패 (3.65ms, 3.93MB)



4. 가사 검색
--> 트리 구조가 아니라 트라이 라는 자료구조로 고쳐야함
-> 트리구조에서 14번 테스트케이스 실패

4.1 가사 검색 개선
정확성 23.5 -> Test case 14번 머임
효율성 30.0 -> 케이스 4,5 번 통과했는데 reverseTrie 만들어서 사용
			 접미어에 ???가 붙을경우 query를 뒤집어서 reverseTrie에 사용
합 53.5

효율성 나머지 3개의 케이스에 대해서는 ?를 만났을 때 loop를 돌지 않는 방향으로 개선 가능
-> unorder_map을 사용하여 해당 시점에서 길이 'x'개인 문자를 찾아 return

어이가 없다 각 노드마다 문장의 길이를 관리하는 unordered_map을 사용하니 다 통과됨...